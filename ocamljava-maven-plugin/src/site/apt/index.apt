 ------
 Introduction
 ------
 Carmelo Piccione 
 ------
 02 June 2014
 ------
 
 ~~ Licensed to the Apache Software Foundation (ASF) under one
 ~~ or more contributor license agreements.  See the NOTICE file
 ~~ distributed with this work for additional information
 ~~ regarding copyright ownership.  The ASF licenses this file
 ~~ to you under the Apache License, Version 2.0 (the
 ~~ "License"); you may not use this file except in compliance
 ~~ with the License.  You may obtain a copy of the License at
 ~~
 ~~   http://www.apache.org/licenses/LICENSE-2.0
 ~~
 ~~ Unless required by applicable law or agreed to in writing,
 ~~ software distributed under the License is distributed on an
 ~~ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 ~~ KIND, either express or implied.  See the License for the
 ~~ specific language governing permissions and limitations
 ~~ under the License.

 ~~ NOTE: For help with the syntax of this file, see:
 ~~ http://maven.apache.org/doxia/references/apt-format.html


OcamlJava Maven Plugin

 This plugin provides maven integration for ocaml java. See http://ocamljava.x9c.fr for details on that specific project. The important 
 thing to know is it's a pure java solution to integrating ocaml code with the JVM, and this project provides the necessary maven integration.

 Ocaml code can access compiled java sources from the working project, as well any of the maven dependencies listed in the project's pom file.

 Conversely, java code can access ocaml code from other maven projects. Currently, it's not possible for java code to reference ocaml code
 within the same project. When this is required you must factor out the relevant java code into a separate maven project.


* Goals Overview

  General information about the goals.

  * {{{./compile-mojo.html}ocamljava:compile}} compiles ocaml sources, typically from the "src/main/ocaml" folder.
  
  * {{{./testCompile-mojo.html}ocamljava:testCompile}} compiles test ocaml sources, typically from the "src/test/ocaml" folder.
  
  * {{{./jar-mojo.html}ocamljava:jar}} attach ocaml compiled sources to the packaged jar.
  
  * {{{./test-jar-mojo.html}ocamljava:test-jar}} attach ocaml compiled test sources to the packaged test jar.
  
  * {{{./wrap-mojo.html}ocamljava:wrap}} wrap the ocaml modules from another maven module with code generated java source files.



* Usage

  General instructions on how to use the Plugin Name can be found on the {{{usage.html}usage page}}. Some more
  specific use cases are described in the examples given below. Last but not least, users occasionally contribute
  additional examples, tips or errata to the
  {{{http://docs.codehaus.org/display/MAVENUSER/Plugin+Name}plugin's wiki page}}.

  In case you still have questions regarding the plugin's usage, please have a look at the {{{faq.html}FAQ}} and feel
  free to contact the {{{mail-lists.html}user mailing list}}. The posts to the mailing list are archived and could
  already contain the answer to your question as part of an older thread. Hence, it is also worth browsing/searching
  the {{{mail-lists.html}mail archive}}.

  If you feel like the plugin is missing a feature or has a defect, you can fill a feature request or bug report in our
  {{{issue-tracking.html}issue tracker}}. When creating a new issue, please provide a comprehensive description of your
  concern. Especially for fixing bugs it is crucial that the developers can reproduce your problem. For this reason,
  entire debug logs, POMs or most preferably little demo projects attached to the issue are very much appreciated.
  Of course, patches are welcome, too. Contributors can check out the project from our
  {{{source-repository.html}source repository}} and will find supplementary information in the
  {{{http://maven.apache.org/guides/development/guide-helping.html}guide to helping with Maven}}. 

* Examples

  The first example demonstrates how to compile and link your ocaml modules into a jar:

  * {{{examples/example-one.html}Compiling ocaml sources and packaging them}}:

  This example demonsrates how to code generate java sources given ocaml-enhanced artifacts (such as the first example):

  * {{{examples/example-two.html}Wrapping ocaml types with code generated java sources}}
 
